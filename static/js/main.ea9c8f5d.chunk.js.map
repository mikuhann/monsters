{"version":3,"sources":["components/card/Card.js","components/card-list/CardList.js","components/search-box/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","monster","name","id","email","className","src","alt","CardList","monsters","map","key","SearchBox","value","placeholder","handleSearch","type","onChange","App","useState","setMonsters","search","setSearch","useEffect","a","axios","get","res","data","console","log","statusText","getData","filteredMonsters","filter","toLowerCase","includes","e","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0VAceA,G,MAVF,SAAC,GAAkC,IAAD,IAAhCC,QAAUC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACjC,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAG,+BAA0BH,EAA1B,0BAAsDI,IAAI,UAClE,4BAAKL,GACL,2BAAIE,MCKKI,G,MARE,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACjB,OACE,yBAAKJ,UAAU,aACZI,EAASC,IAAI,SAACT,GAAD,OAAa,kBAAC,EAAD,CAAMU,IAAKV,EAAQE,GAAIF,QAASA,SCOlDW,G,MAZG,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACtC,OACE,2BACEV,UAAU,aACVW,KAAK,SACLH,MAAOA,EACPC,YAAaA,EACbG,SAAUF,MC2BDG,G,MA9BH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTV,EADS,KACCW,EADD,OAEYD,mBAAS,IAFrB,mBAETE,EAFS,KAEDC,EAFC,KAGhBC,oBAAW,WAAM,2CACf,4BAAAC,EAAA,8EAEsBC,IAAMC,IAAI,8CAFhC,OAEUC,EAFV,OAGIP,EAAYO,EAAIC,MAHpB,gDAKIC,QAAQC,IAAI,KAAEC,YALlB,wDADe,uBAAC,WAAD,wBASfC,IACA,IACF,IAGMC,EAAmBxB,EAASyB,OAAO,SAACjC,GAAD,OAAaA,EAAQC,KAAKiC,cAAcC,SAASf,EAAOc,iBAC/F,OACE,yBAAK9B,UAAU,OACb,wCACA,kBAAC,EAAD,CACEQ,MAAOQ,EACPN,aATS,SAACsB,GAChBf,EAAUe,EAAEC,OAAOzB,QASbC,YAAY,oBACd,kBAAC,EAAD,CAAUL,SAAYwB,OCrBVM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ea9c8f5d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\nconst Card = ({monster: {name, id, email}}) => {\r\n  return (\r\n    <div className='card-container'>\r\n      <img src={`https://robohash.org/${id}?set=set2&size=180x180`} alt='Robot'/>\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport Card from '../card/Card';\r\n\r\nimport './CardList.css'\r\n\r\nconst CardList = ({monsters}) => {\r\n  return (\r\n    <div className='card-list'>\r\n      {monsters.map((monster) => <Card key={monster.id} monster={monster} />)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nimport './SearchBox.css'\r\n\r\nconst SearchBox = ({value, placeholder, handleSearch}) => {\r\n  return (\r\n    <input\r\n      className='search-box'\r\n      type='search'\r\n      value={value}\r\n      placeholder={placeholder}\r\n      onChange={handleSearch}\r\n      />\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport CardList from './components/card-list/CardList';\nimport SearchBox from './components/search-box/SearchBox';\n\nimport './App.css';\n\nconst App = () => {\n  const [monsters, setMonsters] = useState([]);\n  const [search, setSearch] = useState('');\n  useEffect( () => {\n    async function getData() {\n      try {\n        const res = await axios.get('https://jsonplaceholder.typicode.com/users');\n        setMonsters(res.data);\n      } catch (e) {\n        console.log(e.statusText)\n      }\n    }\n    getData();\n  },[]);\n  const onSearch = (e) => {\n    setSearch(e.target.value);\n  };\n  const filteredMonsters = monsters.filter((monster) => monster.name.toLowerCase().includes(search.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <h1>Monsters</h1>\n        <SearchBox\n          value={search}\n          handleSearch={onSearch}\n          placeholder='Search monsters' />\n        <CardList monsters = {filteredMonsters}/>\n      </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}